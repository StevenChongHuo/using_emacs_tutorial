#+STARTIP: overview

* Interface Tweaks
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
					  ;  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (blink-cursor-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq confirm-kill-processes nil)
  (global-set-key (kbd "<f5>") 'revert-buffer)
  (desktop-save-mode t)
  (save-place-mode t)

  ;; Make scrolling softer and make courser not to jump when page finish and scrolling will take you to next page, it will scroll line by line.
  (setq mouse-wheel-scroll-amount '(1))
  (setq mouse-wheel-progressive-speed nil)
  (setq scroll-conservatively 101)

  ;; Remember last windows opened and reopen again with pressing C-c ‚Üê
  (winner-mode t)

  ;; Enable column number mode:
  (column-number-mode t)
#+END_SRC

* Font "Name&Size&Defaults"
  #+BEGIN_SRC emacs-lisp
    (setq my/font-name "Liga Nerd Font Mono")
    (defcustom my/font-size 16 "My default font size")
    (defun set-frame-font-size (&optional font-size)
      "Change frame font size to FONT-SIZE.
	If no FONT-SIZE provided, reset the font size to its default variable."
      (let ((font-size
	     (or font-size
		 (car (get 'my/font-size 'standard-value)))))
	(customize-set-variable 'my/font-size font-size)
	(set-frame-font
	 (format "%s %d" my/font-name font-size) nil t)))

    (defun increase-frame-font ()
      "Increase frame font by one."
      (interactive)
      (set-frame-font-size (+ my/font-size 1)))

    (defun decreease-frame-font ()
      "Decrease frame font by one."
      (interactive)
      (set-frame-font-size (- my/font-size 1)))

    (defun reset-frame-font ()
      "Reset frame font to its default value."
      (interactive)
      (set-frame-font-size))

    (add-hook 'after-init-hook 'reset-frame-font)
  #+END_SRC

* Security
  #+BEGIN_SRC emacs-lisp
    (setq gnutls-verify-error t)
    (setq tls-checktrust t)
  #+END_SRC

* try
#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC

* which key
  Brings up some help
  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure t
      :config (which-key-mode))
  #+END_SRC
  I don't wait for `which-key` popup for long time.
  #+BEGIN_SRC emacs-lisp
    (setq echo-keystrokes 0.5)
  #+END_SRC

* Package Manager Straight
  #+BEGIN_SRC emacs-lisp
    (setq straight-use-package-by-default t)
    (defvar bootstrap-version)
    (let ((bootstrap-file
	   (expand-file-name  "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	  (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
	(with-current-buffer
	    (url-retrieve-synchronously
	     "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	     'silent 'inhibit-cookies)
	  (goto-char (point-max))
	  (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))

    ;; use-package
    (straight-use-package 'use-package)
  #+END_SRC

* Paradox
  Used to manage packages, list them using filtering, update them and so on.
  #+BEGIN_SRC emacs-lisp
    (require 'paradox)
    (paradox-enable)
  #+END_SRC

* Org mode
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (setq indo-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)

  (defalias 'list-buffers 'ibuffer)

  (global-set-key (kbd "C-c c") 'org-capture)

  (setq org-capture-templates
	'(("a" "Appointment" entry (file+headline "~/Dropbox/orgfiles/gcal.org" "Appointments")
	   "* TODO %?\n:PROPERTIES:\n\n:END:\nDEADLINE: %^T \n %i\n")
	  ("n" "Note" entry (file+headline "~/Dropbox/orgfiles/notes.org" "Notes")
	   "* Note %?\n%T")
	  ("l" "Link" entry (file+headline "~/Dropbox/orgfiles/links.org" "Links")
	   "* %? %^L %^g \n%T" :prepend t)
	  ("t" "To Do Item" entry (file+headline "~/Dropbox/orgfiles/i.org" "To Do Items")
	   "* %?\n%T" :prepend t)))
#+END_SRC

* Ace windows for easy window switching
when you click on "C-x o" and you have many windows opened, it will number them so you can select
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces '(aw-leading-char-face
     ((t (:inherit ace-jump-face-foreground :height 3.0)))))
    ))
#+END_SRC

* Swiper / Ivy / Counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :bind
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))

  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy))

  ;; very nice search engine and add heighlights for fuzzy search
  (use-package swiper
    :ensure t
    :bind (("C-s" . swiper)
	   ("C-r" . swiper)
	   ("C-c C-r" . ivy-resume)
	   ("M-x" . counsel-M-x)
	   ("C-x C-f" . counsel-find-file))
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))
#+END_SRC

* Avy - navigate by searching for letter and jumping to it.
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-char))
#+END_SRC

* Autocomplete
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))
#+END_SRC

* Undo Tree
  #+BEGIN_SRC emacs-lisp
    (use-package undo-tree
      :ensure t
      :init
      (global-undo-tree-mode))
  #+END_SRC

* Misc packages
  #+BEGIN_SRC emacs-lisp
    ;beacon is to make some animated highlight to show where is your courser now.
    (use-package beacon
      :ensure t
      :config
      (beacon-mode 1))

    ;hungry-delete is to delete multiple empty space lines at once.
    (use-package hungry-delete
      :ensure t
      :config
      (global-hungry-delete-mode))
  #+END_SRC

* aggressive-indent / expand-region / iedit    
  #+BEGIN_SRC emacs-lisp
    (use-package aggressive-indent
      :ensure t
      :config
      (global-aggressive-indent-mode 1))

    (use-package expand-region
      :ensure t
      :config
      (global-set-key (kbd "C-=") 'er/expand-region))

    (use-package iedit
      :ensure t)

    (global-set-key (kbd "C-c j") 'goto-line)
  #+END_SRC

* Load other files
  #+BEGIN_SRC emacs-lisp
    (defun load-if-exists (f)
      "load the elisp file only if it exists and is readable"
      (if (file-readable-p f)
	  (load-file f)))
  #+END_SRC

* Evil Mode 
  #+BEGIN_SRC emacs-lisp
	
  #+END_SRC

* Web Mode
  #+BEGIN_SRC emacs-lisp
    (use-package web-mode
      :ensure t
      :config
      (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
      (setq web-mode-engines-alist
	    '(("django" . "\\.html\\'")))
      (setq web-mode-ac-sources-alist
	    '(("css" . (ac-source-css-property))
	      ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
      (setq web-mode-enable-auto-closing t))
  #+END_SRC

* Loading Config Files [[file:config/ohotnik.el][Config Directory]]
  #+BEGIN_SRC emacs-lisp
    (dolist
	(file
	 (directory-files
	  (concat (expand-file-name user-emacs-directory) "config")
	  t
	  "^.[^#].+el$"))
      (load file))
  #+END_SRC

* Smart Parentheses
  #+BEGIN_SRC emacs-lisp
    (use-package smartparens
      :config
      (require 'smartparens-config)
      (smartparens-global-mode))
  #+END_SRC
